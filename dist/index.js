const e={},t={jsc:{parser:{syntax:`typescript`}}},n={loader:`ts`},r={target:99};async function i(i,a){if(i==`oxc`){let{transform:t}=await import(`oxc-transform`);return n=>t(`_.ts`,n,a??e).code}else if(i==`swc`){let{transformSync:e}=await import(`@swc/core`);return n=>e(n,a??t).code}else if(i==`esbuild`){let{transformSync:e}=await import(`esbuild`);return t=>e(t,a??n).code}else if(i==`typescript`){let{transpile:e}=await import(`typescript`);return t=>e(t,a??r)}else throw Error(`Unsupported engine: ${i}`)}function a(e){let t=Object.assign({engine:`oxc`,options:null,extensions:[`.html`],tsScriptAttr:`lang="ts"`,jsScriptAttr:``,keepComponentImports:!0,logPrefix:`[rollup-plugin-inline-ts]`,debug:!1},e),n=t.logPrefix?` ${t.logPrefix}`:``,r=t.tsScriptAttr.replaceAll(/[.*+?^${}()|[\]\\]/g,String.raw`\$&`),a=RegExp(`(<script.*?\\s+${r}(?:\\s+.*?|)>)([\\s\\S]*?)<\\/script>`,`g`),o=/import\s+([\w$]+)\s+from\s+["']([^"']+\.(\w+)(?:\?[^"']*)?)["'];?/g,s=t.extensions.map(e=>e.replaceAll(/\W/g,``)),c;return{name:`inline-ts`,async buildStart(){c=await i(t.engine,t.options)},transform(e,r){try{let i=r.split(`.`).pop();if(!s.includes(i))return e;let a=t.debug?performance.now():0,o=l(e);return t.debug&&console.info(`✅${n} \u001B[32mDone\u001B[0m: ${r} in ${(performance.now()-a).toFixed(2)} ms`),o}catch(t){return console.error(`❌${n}`,t),e}}};function l(e){return e.replace(a,(e,n,i)=>{let a=[];t.keepComponentImports&&(i=i.replaceAll(o,(e,t,n,r)=>{if(e=e.trimEnd().endsWith(`;`)?e:`${e};`,s.includes(r)){let n=`void ${t};`;return a.push(n),`${e} ${n}`}return e}));let l=c(i);if(t.keepComponentImports)for(let e of a)l=l.replace(e,``);return`${n.replace(r,t.jsScriptAttr)}\n${l}\n</script>`})}}export{a as default};